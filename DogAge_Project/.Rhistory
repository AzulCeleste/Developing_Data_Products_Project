query3<- sqldf("select * from acs")
query3
query4<- sqldf("select * from acs where AGEP < 50 and pwgtp1")
query4
head(query1)
head(query2)
head(query3)
head(query4)
query2
head(query2)
tail(query2)
uni<- unique(acs$AGEP)
query1 <- sqldf("select distinct AGEP from acs")
query2<- sqldf("select distinct pwgtp1 from acs")
identical(uni, query1)
identical(uni, query2)
query3<- sqldf("select AGEP where unique from acs")
query4<- sqldf("select unique * from acs")
uni
query1
query2
install.packages("RH2")
query3<- sqldf("select AGEP where unique from acs")
length(unique(acs$AGEP))
length(query1)
length(query2)
sqldf("select distinct AGEP from acs")
query3<- sqldf("select AGEP where unique from acs")
head(acs)
?unique
uni
query1
query2
length(uni)
length(query1)
nrows(query1)
rows(query1)
query2
?distinct
??distinct
?sqldf
query1
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
head(con)
htmlCode=readLines(con)
close(con)
htmlCode
?nchar
nchar(10,20,30,100)
x<- htmlCode[c(10, 20, 30, 100)]
nchar(x)
htmlCode= readLines(c(10,20,30,100))
htmlCode=readLines(con$100)
file <- "./data/getdata-wksst8110.for"
fwf<- read.fwf(file)
fwf<- read.fwf(file, 9)
suma <- sum(file, 4)
head(file)
head(fwf)
?sum
suma<- sum(fwf$4)
suma<- sum(fwf$Week)
suma
?name
columns(fwf)
?columns
?column
colnames(fwf)
rownmaes(fwf)
sum(fwf[,4])
fwf <- read.fwf(file, widths = c(10, 9,4, 9,4, 9,4, 9,4), skip = 4)
sum(fwf[,4])
?read.fwf
fwf <- read.fwf(file, widths = c(10, 9,4, 9,4, 9,4, 9,4), skip = 3)
sum(fwf[,4])
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleSizes
head(sampleTimes)
pwd()
dir
dir()
library(knitr)
knit2html("PA1_tempalte.Rmd")
dir()
knit2html("PA1_template.Rmd")
setwd("C:/Users/210067772/Coursera")
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt")
activityLabels[, 2] <- as.character(activityLabels[, 2])
features <- read.table("UCI HAR Dataset/features.txt")
features[, 2] <- as.character(features[, 2])
featuresWanted <- grep(".*mean.*|.*std.*", features[, 2])
featuresWanted.names <- features[featuresWanted, 2]
featuresWanted.names = gsub('-mean', 'Mean', featuresWanted.names)
featuresWanted.names = gsub('-std', 'Std', featuresWanted.names)
featuresWanted.names <- gsub('[-()]', '', featuresWanted.names)
train <- read.table("UCI HAR Dataset/train/X_train.txt")[featuresWanted]
trainActivities <- read.table("UCI HAR Dataset/train/Y_train.txt")
trainSubjects <- read.table("UCI HAR Dataset/train/subject_train.txt")
train <- cbind(trainSubjects, trainActivities, train)
test <- read.table("UCI HAR Dataset/test/X_test.txt")[featuresWanted]
testActivities <- read.table("UCI HAR Dataset/test/Y_test.txt")
testSubjects <- read.table("UCI HAR Dataset/test/subject_test.txt")
test <- cbind(testSubjects, testActivities, test)
allData <- rbind(train, test)
colnames(allData) <- c("subject", "activity", featuresWanted.names)
allData$activity <- factor(allData$activity, levels = activityLabels[, 1], labels = activityLabels[, 2])
allData$subject <- as.factor(allData$subject)
allData.melted <- melt(allData, id = c("subject", "activity"))
allData.mean <- dcast(allData.melted, subject + activity ~ variable, mean)
library(reshape2)
install.packages(reshape2)
install.packages("reshape2")
install.packages("reshape2")
ctivityLabels <- read.table("UCI HAR Dataset/activity_labels.txt")
activityLabels[, 2] <- as.character(activityLabels[, 2])
features <- read.table("UCI HAR Dataset/features.txt")
features[, 2] <- as.character(features[, 2])
featuresWanted <- grep(".*mean.*|.*std.*", features[, 2])
featuresWanted.names <- features[featuresWanted, 2]
featuresWanted.names = gsub('-mean', 'Mean', featuresWanted.names)
featuresWanted.names = gsub('-std', 'Std', featuresWanted.names)
featuresWanted.names <- gsub('[-()]', '', featuresWanted.names)
train <- read.table("UCI HAR Dataset/train/X_train.txt")[featuresWanted]
trainActivities <- read.table("UCI HAR Dataset/train/Y_train.txt")
trainSubjects <- read.table("UCI HAR Dataset/train/subject_train.txt")
train <- cbind(trainSubjects, trainActivities, train)
test <- read.table("UCI HAR Dataset/test/X_test.txt")[featuresWanted]
testActivities <- read.table("UCI HAR Dataset/test/Y_test.txt")
testSubjects <- read.table("UCI HAR Dataset/test/subject_test.txt")
test <- cbind(testSubjects, testActivities, test)
allData <- rbind(train, test)
colnames(allData) <- c("subject", "activity", featuresWanted.names)
allData$activity <- factor(allData$activity, levels = activityLabels[, 1], labels = activityLabels[, 2])
allData$subject <- as.factor(allData$subject)
allData.melted <- melt(allData, id = c("subject", "activity"))
allData.mean <- dcast(allData.melted, subject + activity ~ variable, mean)
write.table(allData.mean, "tidy.txt", row.names = FALSE, quote = FALSE)
library(reshape2)
allData.melted <- melt(allData, id = c("subject", "activity"))
allData.mean <- dcast(allData.melted, subject + activity ~ variable, mean)
write.table(allData.mean, "tidy.txt", row.names = FALSE, quote = FALSE)
### Step 1 and 4
### Load train and test data into a single dataset (test first, train last) with descriptive names
# fetch features names, 2nd column of data retrieved from read.table on the feature.txt file
featuresName <- read.table("UCI HAR Dataset/features.txt", header = FALSE)[,2]
# clean featuresName from non authorized characters in variable name
# (may be turned to '.' when using them, but try to get more readable names)
featuresName <- gsub("\\(\\)","",featuresName) # remove '()'
featuresName <- gsub("\\(","_",featuresName) # replace '(' by '_'
featuresName <- gsub("\\)","_",featuresName) # replace ')' by '_'
featuresName <- gsub("-","_",featuresName) # replace '-' by '_'
# Load train and test dataset. Append train after test, use cleaned featuresName vector to name the variables
cat("Loading data, it may take a while...") # just warn user that it may be long
UCIDataSet <- rbind(read.table("UCI HAR Dataset/test/X_test.txt", col.names = featuresName, header = FALSE),
read.table("UCI HAR Dataset/train/X_train.txt", col.names = featuresName, header = FALSE))
cat(" done\n")
### Step 2
### Keep mean and std features only (exclude _meanFreq() features which doesn't seem to fit in the requested data to keep)
UCIDataSet <- UCIDataSet[,grep("_std|_mean$|_mean_",featuresName)] # () in the feature's name were removed when cleaning them to get nicer names
### Step 2
### Keep mean and std features only (exclude _meanFreq() features which doesn't seem to fit in the requested data to keep)
UCIDataSet <- UCIDataSet[,grep("_std|_mean$|_mean_",featuresName)] # () in the feature's name were removed when cleaning them to get nicer names
### Step 3
### add activity to the dataset using descriptive names
# get test and train activity in an integer form from the y_test.txt and y_train.txt file
# append them in the same way it was done for data before
activityIndex = rbind(read.table("UCI HAR Dataset/test/y_test.txt", header = FALSE),
read.table("UCI HAR Dataset/train/y_train.txt", header = FALSE))
# get the activity readable labels
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", header = FALSE)[,2]
# add an Activity variable into the dataset using the readable labels
UCIDataSet$Activity <- activityLabels[activityIndex$V1]
# add the subject index to the dataset, as above append test and train to get the complete data
UCIDataSet <- cbind(UCIDataSet, rbind(read.table("UCI HAR Dataset/test/subject_test.txt", header = FALSE, col.names = "Subject"),
read.table("UCI HAR Dataset/train/subject_train.txt", header = FALSE, col.names = "Subject")))
### Step 5
### Aggregate data by Subject and Activity(last two column of the dataset), getting the mean of aggregated values
UCIDataSetMeanBySubjectActivity <- aggregate(UCIDataSet[,1:66], UCIDataSet[,(ncol(UCIDataSet)-1):ncol(UCIDataSet)], mean)
# write the new dataset to a file
write.table(UCIDataSetMeanBySubjectActivity, "tidy_UCI_HAR_Dataset.txt", row.names = FALSE)
library(plyr)
#read all files.
features <- read.table("data/UCI HAR Dataset/features.txt", colClasses = c("character"))
activity_labels <- read.table("data/UCI HAR Dataset/features.txt", col.names = c("ActivityId", "Activity"))
x_train <- read.table("data/UCI HAR Dataset/train/X_train.txt")
y_train <- read.table("data/UCI HAR Dataset/train/y_train.txt")
subject_train <- read.table("data/UCI HAR Dataset/train/subject_train.txt")
x_test <- read.table("data/UCI HAR Dataset/test/X_test.txt")
y_test <- read.table("data/UCI HAR Dataset/test/y_test.txt")
subject_test <- read.table("data/UCI HAR Dataset/test/subject_test.txt")
# Binding sensor data.
training_sensor_data <- cbind(cbind(x_train, subject_train), y_train)
test_sensor_data <- cbind(cbind(x_test, subject_test), y_test)
sensor_data <- rbind(training_sensor_data, test_sensor_data)
# Label columns
sensor_labels <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId"))[,2]
# give names.
names(sensor_data) <- sensor_labels
#Mean and standard deviation
sensor_data_mean_std <- sensor_data[,grepl("mean|std|Subject|ActivityId", names(sensor_data))]
sensor_data_mean_std <- join(sensor_data_mean_std, activity_labels, by = "ActivityId", match = "first")
sensor_data_mean_std <- sensor_data_mean_std[,-1]
# Remove parentheses
names(sensor_data_mean_std) <- gsub('\\(|\\)',"",names(sensor_data_mean_std), perl = TRUE)
# Make syntactically valid names
names(sensor_data_mean_std) <- make.names(names(sensor_data_mean_std))
# Change names, making them clear.
names(sensor_data_mean_std) <- gsub('Acc',"Acceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('GyroJerk',"AngularAcceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Gyro',"AngularSpeed",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Mag',"Magnitude",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^t',"Time.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^f',"Frequency.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.mean',".Mean",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.std',".StandardDeviation",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq\\.',"Frequency.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq$',"Frequency",names(sensor_data_mean_std))
# Creates a tidy data set with the average of each variable.
sensor_avg_by_act_sub = ddply(sensor_data_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(sensor_avg_by_act_sub, file = "sensor_avg_by_act_sub.txt", row.names = FALSE)
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
install_course_zip("C:\Users\210067772\Coursera\SWIRL\swirl_courses-master.zip", multi=TRUE, which_course="Exploratory_Data_Analysis")
install_course_zip("C:/Users/210067772/Coursera/SWIRL/swirl_courses-master.zip", multi=TRUE, which_course="Exploratory_Data_Analysis")
install_course_zip("C:/Users/210067772/Coursera/SWIRL/swirl_courses-master.zip", multi=TRUE, which_course="Getting_and_Cleaning_Data")
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
swirl()
library(swirl)
swirl()
?abline
abline(h=12)
# Reading dataset
data_all <- read.csv("./data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259)
#converting Date to date class
data_all$Date <- as.Date(data_all$Date, format="%d/%m/%Y")
dim(data_all) #2075259       9
# Subsetting the data
data <- subset(data_all, Date=="2007-02-01" | Date=="2007-02-02")
dim(data) #2880    9
rm(data_all)
# Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$dateTime <- as.POSIXct(datetime)
plot(data$dateTime,data$Sub_metering_1, type="l", xlab="", ylab="Energy sub meterin")
?points
points(data$dateTime,data$Sub_metering_2, type="l", col = "red", xlab="", ylab="Energy sub metering")
points(data$dateTime,data$Sub_metering_3, type="l", col = "blue", xlab="", ylab="Energy sub metering")
legend("topright", lty= c(1,1,1))
legend("topright", lty= c(1,1,1), c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue")))
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue")))
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
?legend
?legend
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), text.font = i)
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.8,inset=0)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub meterin")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), text.font = icex=0.8,inset=0)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub meterin")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.8,inset=0)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub meterin")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.4,inset=0)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub meterin")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.5,inset=0)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub meterin")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.6,inset=0)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.6,inset=0)
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.6)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.6, pt.cex=0.5)
png("plot3.png", width=480, height=480)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"), cex=0.6)
dev.off()
png("plot3.png", width=480, height=480)
plot(data$dateTime,data$Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(data$dateTime,data$Sub_metering_2, col = "red")
lines(data$dateTime,data$Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
dev.off()
?mrfrow
par(mfrow = C(2,2))
par(mfrow = c(2,2))
plot(data$dateTime,data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
par(mfrow = c(2,2),  mar = c(4, 4, 2, 1))
plot(data$dateTime,data$Global_active_power, type="l", xlab="", ylab="Global Active Power")
head(data)
with(data, {
plot(dateTime, Global_active_power, type="l", xlab="", ylab="Global Active Power")
plot(dateTime, Voltage, xlab="datetime")
plot(dateTime,Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(dateTime,Sub_metering_2, col = "red")
lines(dateTime,Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
plot(dateTime, Global_reactive_power, xlab="datetime")
})
png("plot4.png", width=480, height=480)
par(mfrow = c(2,2),  mar = c(4, 4, 2, 1))
with(data, {
plot(dateTime, Global_active_power, type="l", xlab="", ylab="Global Active Power")
plot(dateTime, Voltage, xlab="datetime")
plot(dateTime,Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(dateTime,Sub_metering_2, col = "red")
lines(dateTime,Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
plot(dateTime, Global_reactive_power, xlab="datetime")
})
par(mfrow = c(2,2),  mar = c(4, 4, 2, 1))
plot(dateTime, Global_active_power, type="l", xlab="", ylab="Global Active Power")
plot(dateTime, Voltage, xlab="datetime")
dev.cur()
dev.off()
par(mfrow = c(2,2),  mar = c(4, 4, 2, 1))
with(data, {
plot(dateTime, Global_active_power, type="l", xlab="", ylab="Global Active Power")
plot(dateTime, Voltage, xlab="datetime")
plot(dateTime,Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(dateTime,Sub_metering_2, col = "red")
lines(dateTime,Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
plot(dateTime, Global_reactive_power, xlab="datetime")
})
with(data, {
plot(dateTime, Global_active_power, type="l", xlab="", ylab="Global Active Power")
plot(dateTime, Voltage, type="l", xlab="datetime")
plot(dateTime,Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(dateTime,Sub_metering_2, col = "red")
lines(dateTime,Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
plot(dateTime, Global_reactive_power, type="l", xlab="datetime")
})
png("plot4.png", width=480, height=480)
par(mfrow = c(2,2),  mar = c(4, 4, 2, 1))
with(data, {
plot(dateTime, Global_active_power, type="l", xlab="", ylab="Global Active Power")
plot(dateTime, Voltage, type="l", xlab="datetime")
plot(dateTime,Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(dateTime,Sub_metering_2, col = "red")
lines(dateTime,Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
plot(dateTime, Global_reactive_power, type="l", xlab="datetime")
})
dev.off()
?lwd
?plot
?plot("lwd")
png("plot5.png", width=480, height=480)
par(mfrow = c(2,2),  mar = c(4, 4, 2, 1))
with(data, {
plot(dateTime, Global_active_power, type="l", xlab="", ylab="Global Active Power")
plot(dateTime, Voltage, type="l", xlab="datetime")
plot(dateTime,Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(dateTime,Sub_metering_2, col = "red")
lines(dateTime,Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
plot(dateTime, Global_reactive_power, type="l", xlab="datetime")
})
dev.off()
?rm
rm(list = ls())
# Reading dataset
data_all <- read.csv("./data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259)
#converting Date to date class
data_all$Date <- as.Date(data_all$Date, format="%d/%m/%Y")
dim(data_all) #2075259       9
# Subsetting the data
data <- subset(data_all, Date=="2007-02-01" | Date=="2007-02-02")
dim(data) #2880    9
rm(data_all)
# Converting dates
datetime <- paste(as.Date(data$Date), data$Time)
data$dateTime <- as.POSIXct(datetime)
#save to a png file
png("plot4.png", width=480, height=480)
par(mfrow = c(2,2),  mar = c(4, 4, 2, 1))
with(data, {
plot(dateTime, Global_active_power, type="l", xlab="", ylab="Global Active Power")
plot(dateTime, Voltage, type="l", xlab="datetime")
plot(dateTime,Sub_metering_1, type="l", lwd=2.5, xlab="", ylab="Energy sub metering")
lines(dateTime,Sub_metering_2, col = "red")
lines(dateTime,Sub_metering_3, col = "blue")
legend("topright", lty= 1, c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),  col=c("black", "red", "blue"))
plot(dateTime, Global_reactive_power, type="l", xlab="datetime")
})
dev.off()
data_all <- read.csv("./data/household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259)
data_all$Date <- as.Date(data_all$Date, format="%d/%m/%Y")
dim(data_all) #2075259       9
# Subsetting the data
data <- subset(data_all, Date=="2007-02-01" | Date=="2007-02-02")
dim(data) #2880    9
rm(data_all)
date_time <- strptime(paste(data$Date, data$Time), "%d/%m/%Y %H:%M:%S")
global_active_power <- data$Global_active_power
## Define PNG file with a width of 480 pixels and a height of 480 pixels
png("plot2.png", width = 480, height = 480)
## Plotting graph
plot(date_time, global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
round(pnorm(0.51, mean =0.5, sd = 1/sqrt(12*100))*100, 3)
round(pnorm(0.51, mean =0.5, sd = 1/sqrt(12*100), tail=FALSE)*100, 3)
round(pnorm(0.51, mean =0.5, sd = 1/sqrt(12*100), lower.tail=FALSE)*100, 3)
ppois(3, lambda=2.5*4)
?ppois
ppois(3, lambda=2.5*4, lower.tail = FALSE)
ppois(20, lambda=16.5*2, lower.tail = FALSE)
ppois(20, lambda=16.5*2)
?pnorm
pnorm(70, mean = 80, sd =10)
qnorm(0.95, mean = 1100, sd = 75)
choose(5, 4) * 0.5^5
pbinom(5, size = 6, prob = 0.5, lower.tail= FALSE)
choose(5, 4) * 0.5^5 + choose(5,5)* 0.5^5
choose(8, 7) * 0.5^8 + choose(8, 8) * 0.5^8
pbinom(4, size = 6, prob = 0.5, lower.tail= FALSE)
pbinom(4, size = 5, prob = 0.5, lower.tail= FALSE)
pbinom(3, size = 5, prob = 0.5, lower.tail= FALSE)
?rnorm
nosim <- 1000
no <- 10
apply(matrix(rnorm(nosim * n), nosim), 1, mean)
n <- 10
apply(matrix(rnorm(nosim * n), nosim), 1, mean)
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
mean(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
ppois(10, lambda = 5 * 3)
qnorm(95, mean = 1100, sd = 75)
?qnorm
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 75/sqrt(100))
75/sqrt(100)
pnorm(16, mean =  15, sd =10)
pnorm(14, mean =  15, sd =10)
pnorm(16, mean =  15, sd =10)-pnorm(14, mean =  15, sd =10)
pnorm(14, mean =  15, sd =10/sqrt(100))
pnorm(16, mean =  15, sd =10/sqrt(100))-pnorm(14, mean =  15, sd =10/sqrt(100))
qnorm(0.5, mean=0.5, sd =1/sqrt(12*1000))
swirl()
swirl
librar(swor)
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Statistical_Inference")
install_course_zip("C:\Users\210067772\Coursera\SWIRL\swirl_courses-master.zip", multi=TRUE,
which_course="Statistical_Inference")
install_course_zip("C:/Users/210067772/Coursera/SWIRL/swirl_courses-master.zip", multi=TRUE,
which_course="Statistical_Inference")
publish_rpubs("Developing Data Products Course Project", "index.html")
libray(shiny)
library(shiny)
publish_rpubs("Developing Data Products Course Project", "index.html")
library(devtools)
publish_rpubs("Developing Data Products Course Project", "index.html")
library(slidify)
publish_rpubs("Developing Data Products Course Project", "index.html")
setwd("C:/Users/210067772/Coursera/Developing_Data_Products/dogAgeCalculator/DogAge_Project")
publish_rpubs("Developing Data Products Course Project", "index.html")
find.package("RCurl")
.libPaths( "")
publish_rpubs("Developing Data Products Course Project", "index.html")
library(RCurl)
install.packages("RCurl")
install.packages("RCurl")
library(RCurl)
install.packages("RCurl")
wget http://cran.r-project.org/src/contrib/RCurl_1.95-4.1.tar.gz
